// Code generated by protoc-gen-go. DO NOT EDIT.
// source: facebook/events.proto

package grain_facebook

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Coordinate struct {
	Longitude float32 `protobuf:"fixed32,1,opt,name=longitude" json:"longitude,omitempty"`
	Latitude  float32 `protobuf:"fixed32,2,opt,name=latitude" json:"latitude,omitempty"`
}

func (m *Coordinate) Reset()                    { *m = Coordinate{} }
func (m *Coordinate) String() string            { return proto.CompactTextString(m) }
func (*Coordinate) ProtoMessage()               {}
func (*Coordinate) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *Coordinate) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *Coordinate) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

type Event struct {
	Name           string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	StartTimestamp int64  `protobuf:"varint,2,opt,name=start_timestamp,json=startTimestamp" json:"start_timestamp,omitempty"`
	EndTimestamp   int64  `protobuf:"varint,3,opt,name=end_timestamp,json=endTimestamp" json:"end_timestamp,omitempty"`
	Description    string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *Event) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Event) GetStartTimestamp() int64 {
	if m != nil {
		return m.StartTimestamp
	}
	return 0
}

func (m *Event) GetEndTimestamp() int64 {
	if m != nil {
		return m.EndTimestamp
	}
	return 0
}

func (m *Event) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Event_Place struct {
	Name       string      `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Coordinate *Coordinate `protobuf:"bytes,2,opt,name=coordinate" json:"coordinate,omitempty"`
	Address    string      `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
}

func (m *Event_Place) Reset()                    { *m = Event_Place{} }
func (m *Event_Place) String() string            { return proto.CompactTextString(m) }
func (*Event_Place) ProtoMessage()               {}
func (*Event_Place) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1, 0} }

func (m *Event_Place) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Event_Place) GetCoordinate() *Coordinate {
	if m != nil {
		return m.Coordinate
	}
	return nil
}

func (m *Event_Place) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type EventInvitations struct {
	EventsInvited []*Event `protobuf:"bytes,1,rep,name=events_invited,json=eventsInvited" json:"events_invited,omitempty"`
}

func (m *EventInvitations) Reset()                    { *m = EventInvitations{} }
func (m *EventInvitations) String() string            { return proto.CompactTextString(m) }
func (*EventInvitations) ProtoMessage()               {}
func (*EventInvitations) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *EventInvitations) GetEventsInvited() []*Event {
	if m != nil {
		return m.EventsInvited
	}
	return nil
}

type EventResponses struct {
	EventResponses *EventResponses_Joined `protobuf:"bytes,1,opt,name=event_responses,json=eventResponses" json:"event_responses,omitempty"`
}

func (m *EventResponses) Reset()                    { *m = EventResponses{} }
func (m *EventResponses) String() string            { return proto.CompactTextString(m) }
func (*EventResponses) ProtoMessage()               {}
func (*EventResponses) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *EventResponses) GetEventResponses() *EventResponses_Joined {
	if m != nil {
		return m.EventResponses
	}
	return nil
}

type EventResponses_Joined struct {
	EventsJoined []*Event `protobuf:"bytes,1,rep,name=events_joined,json=eventsJoined" json:"events_joined,omitempty"`
}

func (m *EventResponses_Joined) Reset()                    { *m = EventResponses_Joined{} }
func (m *EventResponses_Joined) String() string            { return proto.CompactTextString(m) }
func (*EventResponses_Joined) ProtoMessage()               {}
func (*EventResponses_Joined) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3, 0} }

func (m *EventResponses_Joined) GetEventsJoined() []*Event {
	if m != nil {
		return m.EventsJoined
	}
	return nil
}

type YourEvents struct {
	YourEvents []*Event `protobuf:"bytes,1,rep,name=your_events,json=yourEvents" json:"your_events,omitempty"`
}

func (m *YourEvents) Reset()                    { *m = YourEvents{} }
func (m *YourEvents) String() string            { return proto.CompactTextString(m) }
func (*YourEvents) ProtoMessage()               {}
func (*YourEvents) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *YourEvents) GetYourEvents() []*Event {
	if m != nil {
		return m.YourEvents
	}
	return nil
}

func init() {
	proto.RegisterType((*Coordinate)(nil), "grain.facebook.Coordinate")
	proto.RegisterType((*Event)(nil), "grain.facebook.Event")
	proto.RegisterType((*Event_Place)(nil), "grain.facebook.Event.Place")
	proto.RegisterType((*EventInvitations)(nil), "grain.facebook.EventInvitations")
	proto.RegisterType((*EventResponses)(nil), "grain.facebook.EventResponses")
	proto.RegisterType((*EventResponses_Joined)(nil), "grain.facebook.EventResponses.Joined")
	proto.RegisterType((*YourEvents)(nil), "grain.facebook.YourEvents")
}

func init() { proto.RegisterFile("facebook/events.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 365 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x4f, 0x6b, 0xf2, 0x40,
	0x10, 0xc6, 0x89, 0xff, 0xde, 0xd7, 0x89, 0xc6, 0x97, 0x05, 0x21, 0x84, 0xf7, 0x20, 0x29, 0xa5,
	0x9e, 0x52, 0xb0, 0xd0, 0x83, 0xf4, 0x56, 0x5b, 0xb0, 0x87, 0x22, 0xa1, 0x97, 0x9e, 0xc2, 0x9a,
	0xdd, 0xca, 0xb6, 0xba, 0x9b, 0xee, 0xae, 0x82, 0x5f, 0xa8, 0x1f, 0xb3, 0x14, 0x67, 0x9b, 0x68,
	0x8b, 0x78, 0xcb, 0x3e, 0xcf, 0x6f, 0x66, 0x9e, 0x19, 0x02, 0xfd, 0x17, 0x9a, 0xf3, 0xb9, 0x52,
	0x6f, 0x97, 0x7c, 0xc3, 0xa5, 0x35, 0x49, 0xa1, 0x95, 0x55, 0x24, 0x58, 0x68, 0x2a, 0x64, 0x52,
	0x9a, 0xf1, 0x3d, 0xc0, 0xad, 0x52, 0x9a, 0x09, 0x49, 0x2d, 0x27, 0xff, 0xa1, 0xbd, 0x54, 0x72,
	0x21, 0xec, 0x9a, 0xf1, 0xd0, 0x1b, 0x78, 0xc3, 0x5a, 0xba, 0x17, 0x48, 0x04, 0x7f, 0x97, 0xd4,
	0x3a, 0xb3, 0x86, 0x66, 0xf5, 0x8e, 0x3f, 0x3d, 0x68, 0xde, 0xed, 0x06, 0x11, 0x02, 0x0d, 0x49,
	0x57, 0xae, 0xbc, 0x9d, 0xe2, 0x37, 0xb9, 0x80, 0x9e, 0xb1, 0x54, 0xdb, 0xcc, 0x8a, 0x15, 0x37,
	0x96, 0xae, 0x0a, 0x6c, 0x50, 0x4f, 0x03, 0x94, 0x9f, 0x4a, 0x95, 0x9c, 0x41, 0x97, 0x4b, 0x76,
	0x80, 0xd5, 0x11, 0xeb, 0x70, 0xc9, 0xf6, 0xd0, 0x00, 0x7c, 0xc6, 0x4d, 0xae, 0x45, 0x61, 0x85,
	0x92, 0x61, 0x03, 0x07, 0x1d, 0x4a, 0xd1, 0x3b, 0x34, 0x67, 0x4b, 0x9a, 0xf3, 0xa3, 0x61, 0xc6,
	0x00, 0x79, 0xb5, 0x32, 0xe6, 0xf0, 0x47, 0x51, 0xf2, 0xf3, 0x2e, 0xc9, 0xfe, 0x28, 0xe9, 0x01,
	0x4d, 0x42, 0xf8, 0x43, 0x19, 0xd3, 0xdc, 0x18, 0x4c, 0xd6, 0x4e, 0xcb, 0x67, 0x3c, 0x83, 0x7f,
	0xb8, 0xff, 0x54, 0x6e, 0x84, 0xa5, 0xbb, 0x14, 0x86, 0xdc, 0x40, 0xe0, 0x8e, 0x9f, 0x89, 0x9d,
	0xca, 0x59, 0xe8, 0x0d, 0xea, 0x43, 0x7f, 0xd4, 0xff, 0x3d, 0x0d, 0x2b, 0xd3, 0xae, 0x83, 0xa7,
	0x8e, 0x8d, 0x3f, 0x3c, 0x08, 0x9c, 0xc1, 0x4d, 0xa1, 0xa4, 0xe1, 0x86, 0x3c, 0x42, 0x0f, 0x99,
	0x4c, 0x97, 0x12, 0x6e, 0xe6, 0x8f, 0xce, 0x8f, 0x77, 0x2c, 0xa9, 0xe4, 0x41, 0x09, 0xc9, 0x59,
	0xea, 0xe2, 0x54, 0x72, 0x34, 0x81, 0x96, 0x73, 0xc8, 0x18, 0xbe, 0xa7, 0x67, 0xaf, 0x28, 0x9c,
	0x4e, 0xda, 0x71, 0xac, 0xab, 0x8d, 0x27, 0x00, 0xcf, 0x6a, 0xad, 0xd1, 0x32, 0xe4, 0x1a, 0xfc,
	0xad, 0x5a, 0xeb, 0xcc, 0x21, 0xa7, 0xfb, 0xc0, 0xb6, 0xaa, 0x9b, 0xb7, 0xf0, 0x07, 0xbd, 0xfa,
	0x0a, 0x00, 0x00, 0xff, 0xff, 0x04, 0x91, 0xfb, 0xcb, 0xb9, 0x02, 0x00, 0x00,
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: facebook/comments.proto

package grain_facebook

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Comment struct {
	Timestamp int64  `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Comment   string `protobuf:"bytes,2,opt,name=comment" json:"comment,omitempty"`
	Author    string `protobuf:"bytes,3,opt,name=author" json:"author,omitempty"`
	Group     string `protobuf:"bytes,4,opt,name=group" json:"group,omitempty"`
}

func (m *Comment) Reset()                    { *m = Comment{} }
func (m *Comment) String() string            { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()               {}
func (*Comment) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Comment) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Comment) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *Comment) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Comment) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

type PhotoMetadata struct {
	IsoSpeed          int64  `protobuf:"varint,1,opt,name=iso_speed,json=isoSpeed" json:"iso_speed,omitempty"`
	Orientation       int64  `protobuf:"varint,2,opt,name=orientation" json:"orientation,omitempty"`
	OriginalWidth     int64  `protobuf:"varint,3,opt,name=original_width,json=originalWidth" json:"original_width,omitempty"`
	OriginalHeight    int64  `protobuf:"varint,4,opt,name=original_height,json=originalHeight" json:"original_height,omitempty"`
	UploadIp          string `protobuf:"bytes,5,opt,name=upload_ip,json=uploadIp" json:"upload_ip,omitempty"`
	CameraMake        string `protobuf:"bytes,6,opt,name=camera_make,json=cameraMake" json:"camera_make,omitempty"`
	CameraModel       string `protobuf:"bytes,7,opt,name=camera_model,json=cameraModel" json:"camera_model,omitempty"`
	TakenTimestamp    int64  `protobuf:"varint,8,opt,name=taken_timestamp,json=takenTimestamp" json:"taken_timestamp,omitempty"`
	ModifiedTimestamp int64  `protobuf:"varint,9,opt,name=modified_timestamp,json=modifiedTimestamp" json:"modified_timestamp,omitempty"`
	Exposure          string `protobuf:"bytes,10,opt,name=exposure" json:"exposure,omitempty"`
	FocalLength       string `protobuf:"bytes,11,opt,name=focal_length,json=focalLength" json:"focal_length,omitempty"`
	FStop             string `protobuf:"bytes,12,opt,name=f_stop,json=fStop" json:"f_stop,omitempty"`
}

func (m *PhotoMetadata) Reset()                    { *m = PhotoMetadata{} }
func (m *PhotoMetadata) String() string            { return proto.CompactTextString(m) }
func (*PhotoMetadata) ProtoMessage()               {}
func (*PhotoMetadata) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *PhotoMetadata) GetIsoSpeed() int64 {
	if m != nil {
		return m.IsoSpeed
	}
	return 0
}

func (m *PhotoMetadata) GetOrientation() int64 {
	if m != nil {
		return m.Orientation
	}
	return 0
}

func (m *PhotoMetadata) GetOriginalWidth() int64 {
	if m != nil {
		return m.OriginalWidth
	}
	return 0
}

func (m *PhotoMetadata) GetOriginalHeight() int64 {
	if m != nil {
		return m.OriginalHeight
	}
	return 0
}

func (m *PhotoMetadata) GetUploadIp() string {
	if m != nil {
		return m.UploadIp
	}
	return ""
}

func (m *PhotoMetadata) GetCameraMake() string {
	if m != nil {
		return m.CameraMake
	}
	return ""
}

func (m *PhotoMetadata) GetCameraModel() string {
	if m != nil {
		return m.CameraModel
	}
	return ""
}

func (m *PhotoMetadata) GetTakenTimestamp() int64 {
	if m != nil {
		return m.TakenTimestamp
	}
	return 0
}

func (m *PhotoMetadata) GetModifiedTimestamp() int64 {
	if m != nil {
		return m.ModifiedTimestamp
	}
	return 0
}

func (m *PhotoMetadata) GetExposure() string {
	if m != nil {
		return m.Exposure
	}
	return ""
}

func (m *PhotoMetadata) GetFocalLength() string {
	if m != nil {
		return m.FocalLength
	}
	return ""
}

func (m *PhotoMetadata) GetFStop() string {
	if m != nil {
		return m.FStop
	}
	return ""
}

type MediaMetadata struct {
	PhotoMetadata []*PhotoMetadata `protobuf:"bytes,1,rep,name=photo_metadata,json=photoMetadata" json:"photo_metadata,omitempty"`
}

func (m *MediaMetadata) Reset()                    { *m = MediaMetadata{} }
func (m *MediaMetadata) String() string            { return proto.CompactTextString(m) }
func (*MediaMetadata) ProtoMessage()               {}
func (*MediaMetadata) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *MediaMetadata) GetPhotoMetadata() []*PhotoMetadata {
	if m != nil {
		return m.PhotoMetadata
	}
	return nil
}

type Media struct {
	Uri               string         `protobuf:"bytes,1,opt,name=uri" json:"uri,omitempty"`
	MediaPath         string         `protobuf:"bytes,2,opt,name=media_path,json=mediaPath" json:"media_path,omitempty"`
	CreationTimestamp int64          `protobuf:"varint,3,opt,name=creation_timestamp,json=creationTimestamp" json:"creation_timestamp,omitempty"`
	MediaMetadata     *MediaMetadata `protobuf:"bytes,4,opt,name=media_metadata,json=mediaMetadata" json:"media_metadata,omitempty"`
	Comments          []*Comment     `protobuf:"bytes,5,rep,name=comments" json:"comments,omitempty"`
}

func (m *Media) Reset()                    { *m = Media{} }
func (m *Media) String() string            { return proto.CompactTextString(m) }
func (*Media) ProtoMessage()               {}
func (*Media) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *Media) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *Media) GetMediaPath() string {
	if m != nil {
		return m.MediaPath
	}
	return ""
}

func (m *Media) GetCreationTimestamp() int64 {
	if m != nil {
		return m.CreationTimestamp
	}
	return 0
}

func (m *Media) GetMediaMetadata() *MediaMetadata {
	if m != nil {
		return m.MediaMetadata
	}
	return nil
}

func (m *Media) GetComments() []*Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

type AttachmentData struct {
	Media *Media `protobuf:"bytes,1,opt,name=media" json:"media,omitempty"`
}

func (m *AttachmentData) Reset()                    { *m = AttachmentData{} }
func (m *AttachmentData) String() string            { return proto.CompactTextString(m) }
func (*AttachmentData) ProtoMessage()               {}
func (*AttachmentData) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *AttachmentData) GetMedia() *Media {
	if m != nil {
		return m.Media
	}
	return nil
}

type Attachment struct {
	Data []*AttachmentData `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *Attachment) Reset()                    { *m = Attachment{} }
func (m *Attachment) String() string            { return proto.CompactTextString(m) }
func (*Attachment) ProtoMessage()               {}
func (*Attachment) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *Attachment) GetData() []*AttachmentData {
	if m != nil {
		return m.Data
	}
	return nil
}

type Post struct {
	Timestamp   int64         `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Title       string        `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Data        []*Post_Data  `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
	Attachments []*Attachment `protobuf:"bytes,4,rep,name=attachments" json:"attachments,omitempty"`
}

func (m *Post) Reset()                    { *m = Post{} }
func (m *Post) String() string            { return proto.CompactTextString(m) }
func (*Post) ProtoMessage()               {}
func (*Post) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *Post) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Post) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Post) GetData() []*Post_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Post) GetAttachments() []*Attachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

type Post_Data struct {
	Post    string   `protobuf:"bytes,1,opt,name=post" json:"post,omitempty"`
	Comment *Comment `protobuf:"bytes,2,opt,name=comment" json:"comment,omitempty"`
}

func (m *Post_Data) Reset()                    { *m = Post_Data{} }
func (m *Post_Data) String() string            { return proto.CompactTextString(m) }
func (*Post_Data) ProtoMessage()               {}
func (*Post_Data) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6, 0} }

func (m *Post_Data) GetPost() string {
	if m != nil {
		return m.Post
	}
	return ""
}

func (m *Post_Data) GetComment() *Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

// Stored as an array, not a top level message
type YourPosts struct {
	Posts []*Post `protobuf:"bytes,1,rep,name=posts" json:"posts,omitempty"`
}

func (m *YourPosts) Reset()                    { *m = YourPosts{} }
func (m *YourPosts) String() string            { return proto.CompactTextString(m) }
func (*YourPosts) ProtoMessage()               {}
func (*YourPosts) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *YourPosts) GetPosts() []*Post {
	if m != nil {
		return m.Posts
	}
	return nil
}

func init() {
	proto.RegisterType((*Comment)(nil), "grain.facebook.Comment")
	proto.RegisterType((*PhotoMetadata)(nil), "grain.facebook.PhotoMetadata")
	proto.RegisterType((*MediaMetadata)(nil), "grain.facebook.MediaMetadata")
	proto.RegisterType((*Media)(nil), "grain.facebook.Media")
	proto.RegisterType((*AttachmentData)(nil), "grain.facebook.AttachmentData")
	proto.RegisterType((*Attachment)(nil), "grain.facebook.Attachment")
	proto.RegisterType((*Post)(nil), "grain.facebook.Post")
	proto.RegisterType((*Post_Data)(nil), "grain.facebook.Post.Data")
	proto.RegisterType((*YourPosts)(nil), "grain.facebook.YourPosts")
}

func init() { proto.RegisterFile("facebook/comments.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 636 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x41, 0x6f, 0xd3, 0x4c,
	0x10, 0x55, 0x3e, 0xc7, 0x69, 0x3c, 0x69, 0xf2, 0xd1, 0x55, 0x4b, 0x97, 0x42, 0x21, 0x58, 0x42,
	0x54, 0xa0, 0x06, 0xd1, 0x1e, 0xb8, 0x80, 0x04, 0xa2, 0x07, 0x90, 0x88, 0x54, 0xb9, 0x20, 0xc4,
	0xc9, 0xda, 0xc6, 0x9b, 0x78, 0x95, 0xd8, 0xb3, 0xb2, 0x37, 0x82, 0x3f, 0xc5, 0x9f, 0xe2, 0x47,
	0x70, 0x46, 0x3b, 0x6b, 0x3b, 0x49, 0x09, 0x70, 0xf3, 0xbc, 0x79, 0x33, 0xf3, 0xf6, 0xcd, 0xae,
	0xe1, 0x70, 0x2a, 0x26, 0xf2, 0x1a, 0x71, 0xfe, 0x6c, 0x82, 0x59, 0x26, 0x73, 0x53, 0x8e, 0x74,
	0x81, 0x06, 0xd9, 0x60, 0x56, 0x08, 0x95, 0x8f, 0xea, 0x74, 0x88, 0xb0, 0xf3, 0xd6, 0x31, 0xd8,
	0x3d, 0x08, 0x8c, 0xca, 0x64, 0x69, 0x44, 0xa6, 0x79, 0x6b, 0xd8, 0x3a, 0xf1, 0xa2, 0x15, 0xc0,
	0x38, 0xec, 0x54, 0xad, 0xf8, 0x7f, 0xc3, 0xd6, 0x49, 0x10, 0xd5, 0x21, 0xbb, 0x0d, 0x1d, 0xb1,
	0x34, 0x29, 0x16, 0xdc, 0xa3, 0x44, 0x15, 0xb1, 0x7d, 0xf0, 0x67, 0x05, 0x2e, 0x35, 0x6f, 0x13,
	0xec, 0x82, 0xf0, 0xbb, 0x07, 0xfd, 0xcb, 0x14, 0x0d, 0x8e, 0xa5, 0x11, 0x89, 0x30, 0x82, 0xdd,
	0x85, 0x40, 0x95, 0x18, 0x97, 0x5a, 0xca, 0xa4, 0x9a, 0xdb, 0x55, 0x25, 0x5e, 0xd9, 0x98, 0x0d,
	0xa1, 0x87, 0x85, 0x92, 0xb9, 0x11, 0x46, 0x61, 0x4e, 0xa3, 0xbd, 0x68, 0x1d, 0x62, 0x8f, 0x60,
	0x80, 0x85, 0x9a, 0xa9, 0x5c, 0x2c, 0xe2, 0xaf, 0x2a, 0x31, 0x29, 0xc9, 0xf0, 0xa2, 0x7e, 0x8d,
	0x7e, 0xb6, 0x20, 0x7b, 0x0c, 0xff, 0x37, 0xb4, 0x54, 0xaa, 0x59, 0x6a, 0x48, 0x97, 0x17, 0x35,
	0xd5, 0xef, 0x08, 0xb5, 0x72, 0x96, 0x7a, 0x81, 0x22, 0x89, 0x95, 0xe6, 0x3e, 0x49, 0xef, 0x3a,
	0xe0, 0xbd, 0x66, 0x0f, 0xa0, 0x37, 0x11, 0x99, 0x2c, 0x44, 0x9c, 0x89, 0xb9, 0xe4, 0x1d, 0x4a,
	0x83, 0x83, 0xc6, 0x62, 0x2e, 0xd9, 0x43, 0xd8, 0xad, 0x09, 0x98, 0xc8, 0x05, 0xdf, 0x21, 0x46,
	0x55, 0x34, 0xb6, 0x90, 0x55, 0x62, 0xc4, 0x5c, 0xe6, 0xf1, 0xca, 0xed, 0xae, 0x53, 0x42, 0xf0,
	0xc7, 0xc6, 0xf2, 0x53, 0x60, 0x19, 0x26, 0x6a, 0xaa, 0x64, 0xb2, 0xc6, 0x0d, 0x88, 0xbb, 0x57,
	0x67, 0x56, 0xf4, 0x23, 0xe8, 0xca, 0x6f, 0x1a, 0xcb, 0x65, 0x21, 0x39, 0x38, 0xdd, 0x75, 0x6c,
	0x65, 0x4d, 0x71, 0x22, 0x16, 0xf1, 0x42, 0xe6, 0x33, 0x93, 0xf2, 0x9e, 0x93, 0x45, 0xd8, 0x07,
	0x82, 0xd8, 0x01, 0x74, 0xa6, 0x71, 0x69, 0x50, 0xf3, 0x5d, 0xb7, 0xaf, 0xe9, 0x95, 0x41, 0x1d,
	0x7e, 0x82, 0xfe, 0x58, 0x26, 0x4a, 0x34, 0xeb, 0xba, 0x80, 0x81, 0xb6, 0xfb, 0x8b, 0xb3, 0x0a,
	0xe1, 0xad, 0xa1, 0x77, 0xd2, 0x3b, 0x3b, 0x1e, 0x6d, 0x5e, 0xad, 0xd1, 0xc6, 0x96, 0xa3, 0xbe,
	0x5e, 0x0f, 0xc3, 0x1f, 0x2d, 0xf0, 0xa9, 0x2f, 0xbb, 0x05, 0xde, 0xb2, 0x50, 0xb4, 0xf8, 0x20,
	0xb2, 0x9f, 0xec, 0x18, 0x20, 0xb3, 0xa9, 0x58, 0x0b, 0x93, 0x56, 0xb7, 0x2d, 0x20, 0xe4, 0x52,
	0x98, 0xd4, 0xda, 0x32, 0x29, 0x24, 0x2d, 0x7f, 0xcd, 0x16, 0xb7, 0xf4, 0xbd, 0x3a, 0xb3, 0xb2,
	0xe5, 0x02, 0x06, 0xae, 0x5b, 0xa3, 0xd7, 0xee, 0x7d, 0x8b, 0xde, 0x8d, 0x63, 0x46, 0xfd, 0x6c,
	0xe3, 0xd4, 0xe7, 0xd0, 0xad, 0x5f, 0x12, 0xf7, 0xe9, 0xbc, 0x87, 0x37, 0xeb, 0xab, 0x77, 0x14,
	0x35, 0xc4, 0xf0, 0x15, 0x0c, 0xde, 0x18, 0x23, 0x26, 0xa9, 0x0d, 0x2f, 0x6c, 0x9b, 0xa7, 0xe0,
	0x53, 0x5f, 0x3a, 0x6e, 0xef, 0xec, 0x60, 0xab, 0x86, 0xc8, 0x71, 0xc2, 0xd7, 0x00, 0xab, 0x72,
	0x76, 0x06, 0xed, 0x35, 0xb7, 0xef, 0xdf, 0xac, 0xdc, 0x1c, 0x14, 0x11, 0x37, 0xfc, 0xd9, 0x82,
	0xf6, 0x25, 0x96, 0xff, 0x7a, 0xdb, 0xfb, 0xe0, 0x1b, 0x65, 0x16, 0xb2, 0xf2, 0xda, 0x05, 0xec,
	0xb4, 0x1a, 0xe8, 0xd1, 0xc0, 0x3b, 0xbf, 0xad, 0x17, 0x4b, 0x33, 0x5a, 0xcd, 0x62, 0x2f, 0xa1,
	0x27, 0x1a, 0x0d, 0x25, 0x6f, 0x53, 0xd5, 0xd1, 0x9f, 0x65, 0x46, 0xeb, 0xf4, 0xa3, 0x31, 0xb4,
	0xc9, 0x20, 0x06, 0x6d, 0x8d, 0xa5, 0xa9, 0xae, 0x03, 0x7d, 0xb3, 0xe7, 0x9b, 0xbf, 0x9e, 0xbf,
	0x58, 0x5f, 0xf3, 0xc2, 0x17, 0x10, 0x7c, 0xc1, 0x65, 0x61, 0x35, 0x96, 0xec, 0x09, 0xf8, 0xb6,
	0x4f, 0x59, 0x59, 0xb7, 0xbf, 0xed, 0x24, 0x91, 0xa3, 0x5c, 0x77, 0xe8, 0x37, 0x79, 0xfe, 0x2b,
	0x00, 0x00, 0xff, 0xff, 0xce, 0xd8, 0xa4, 0x9d, 0x41, 0x05, 0x00, 0x00,
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: twitter/entity.proto

package twitterpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Url struct {
	Indices     []int64 `protobuf:"varint,1,rep,packed,name=indices" json:"indices,omitempty"`
	Url         string  `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	DisplayUrl  string  `protobuf:"bytes,3,opt,name=display_url,json=displayUrl" json:"display_url,omitempty"`
	ExpandedUrl string  `protobuf:"bytes,4,opt,name=expanded_url,json=expandedUrl" json:"expanded_url,omitempty"`
}

func (m *Url) Reset()                    { *m = Url{} }
func (m *Url) String() string            { return proto.CompactTextString(m) }
func (*Url) ProtoMessage()               {}
func (*Url) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Url) GetIndices() []int64 {
	if m != nil {
		return m.Indices
	}
	return nil
}

func (m *Url) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Url) GetDisplayUrl() string {
	if m != nil {
		return m.DisplayUrl
	}
	return ""
}

func (m *Url) GetExpandedUrl() string {
	if m != nil {
		return m.ExpandedUrl
	}
	return ""
}

type Hashtag struct {
	Indices []int64 `protobuf:"varint,1,rep,packed,name=indices" json:"indices,omitempty"`
	Text    string  `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
}

func (m *Hashtag) Reset()                    { *m = Hashtag{} }
func (m *Hashtag) String() string            { return proto.CompactTextString(m) }
func (*Hashtag) ProtoMessage()               {}
func (*Hashtag) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *Hashtag) GetIndices() []int64 {
	if m != nil {
		return m.Indices
	}
	return nil
}

func (m *Hashtag) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type UserMention struct {
	Indices    []int64 `protobuf:"varint,1,rep,packed,name=indices" json:"indices,omitempty"`
	Name       string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	ScreenName string  `protobuf:"bytes,3,opt,name=screen_name,json=screenName" json:"screen_name,omitempty"`
	Id         int64   `protobuf:"varint,4,opt,name=id" json:"id,omitempty"`
}

func (m *UserMention) Reset()                    { *m = UserMention{} }
func (m *UserMention) String() string            { return proto.CompactTextString(m) }
func (*UserMention) ProtoMessage()               {}
func (*UserMention) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *UserMention) GetIndices() []int64 {
	if m != nil {
		return m.Indices
	}
	return nil
}

func (m *UserMention) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserMention) GetScreenName() string {
	if m != nil {
		return m.ScreenName
	}
	return ""
}

func (m *UserMention) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MediaSize struct {
	W      int32  `protobuf:"varint,1,opt,name=w" json:"w,omitempty"`
	H      int32  `protobuf:"varint,2,opt,name=h" json:"h,omitempty"`
	Resize string `protobuf:"bytes,3,opt,name=resize" json:"resize,omitempty"`
}

func (m *MediaSize) Reset()                    { *m = MediaSize{} }
func (m *MediaSize) String() string            { return proto.CompactTextString(m) }
func (*MediaSize) ProtoMessage()               {}
func (*MediaSize) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *MediaSize) GetW() int32 {
	if m != nil {
		return m.W
	}
	return 0
}

func (m *MediaSize) GetH() int32 {
	if m != nil {
		return m.H
	}
	return 0
}

func (m *MediaSize) GetResize() string {
	if m != nil {
		return m.Resize
	}
	return ""
}

type MediaSizes struct {
	Medium *MediaSize `protobuf:"bytes,1,opt,name=medium" json:"medium,omitempty"`
	Thumb  *MediaSize `protobuf:"bytes,2,opt,name=thumb" json:"thumb,omitempty"`
	Small  *MediaSize `protobuf:"bytes,3,opt,name=small" json:"small,omitempty"`
	Large  *MediaSize `protobuf:"bytes,4,opt,name=large" json:"large,omitempty"`
}

func (m *MediaSizes) Reset()                    { *m = MediaSizes{} }
func (m *MediaSizes) String() string            { return proto.CompactTextString(m) }
func (*MediaSizes) ProtoMessage()               {}
func (*MediaSizes) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *MediaSizes) GetMedium() *MediaSize {
	if m != nil {
		return m.Medium
	}
	return nil
}

func (m *MediaSizes) GetThumb() *MediaSize {
	if m != nil {
		return m.Thumb
	}
	return nil
}

func (m *MediaSizes) GetSmall() *MediaSize {
	if m != nil {
		return m.Small
	}
	return nil
}

func (m *MediaSizes) GetLarge() *MediaSize {
	if m != nil {
		return m.Large
	}
	return nil
}

type Variant struct {
	Bitrate     int32  `protobuf:"varint,1,opt,name=bitrate" json:"bitrate,omitempty"`
	ContentType string `protobuf:"bytes,2,opt,name=content_type,json=contentType" json:"content_type,omitempty"`
	Url         string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
}

func (m *Variant) Reset()                    { *m = Variant{} }
func (m *Variant) String() string            { return proto.CompactTextString(m) }
func (*Variant) ProtoMessage()               {}
func (*Variant) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *Variant) GetBitrate() int32 {
	if m != nil {
		return m.Bitrate
	}
	return 0
}

func (m *Variant) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *Variant) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type VideoInfo struct {
	AspectRatio    []int32    `protobuf:"varint,1,rep,packed,name=aspect_ratio,json=aspectRatio" json:"aspect_ratio,omitempty"`
	DurationMillis int64      `protobuf:"varint,2,opt,name=duration_millis,json=durationMillis" json:"duration_millis,omitempty"`
	Variants       []*Variant `protobuf:"bytes,3,rep,name=variants" json:"variants,omitempty"`
}

func (m *VideoInfo) Reset()                    { *m = VideoInfo{} }
func (m *VideoInfo) String() string            { return proto.CompactTextString(m) }
func (*VideoInfo) ProtoMessage()               {}
func (*VideoInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *VideoInfo) GetAspectRatio() []int32 {
	if m != nil {
		return m.AspectRatio
	}
	return nil
}

func (m *VideoInfo) GetDurationMillis() int64 {
	if m != nil {
		return m.DurationMillis
	}
	return 0
}

func (m *VideoInfo) GetVariants() []*Variant {
	if m != nil {
		return m.Variants
	}
	return nil
}

type EntityMedia struct {
	Id             int64       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	MediaUrl       string      `protobuf:"bytes,2,opt,name=media_url,json=mediaUrl" json:"media_url,omitempty"`
	MediaUrlHttps  string      `protobuf:"bytes,3,opt,name=media_url_https,json=mediaUrlHttps" json:"media_url_https,omitempty"`
	Url            string      `protobuf:"bytes,4,opt,name=url" json:"url,omitempty"`
	DisplayUrl     string      `protobuf:"bytes,5,opt,name=display_url,json=displayUrl" json:"display_url,omitempty"`
	ExpandedUrl    string      `protobuf:"bytes,6,opt,name=expanded_url,json=expandedUrl" json:"expanded_url,omitempty"`
	Sizes          *MediaSizes `protobuf:"bytes,7,opt,name=sizes" json:"sizes,omitempty"`
	SourceStatusId int64       `protobuf:"varint,8,opt,name=source_status_id,json=sourceStatusId" json:"source_status_id,omitempty"`
	Type           string      `protobuf:"bytes,9,opt,name=type" json:"type,omitempty"`
	Indices        []int64     `protobuf:"varint,10,rep,packed,name=indices" json:"indices,omitempty"`
	VideoInfo      *VideoInfo  `protobuf:"bytes,11,opt,name=video_info,json=videoInfo" json:"video_info,omitempty"`
	ExtAltText     string      `protobuf:"bytes,12,opt,name=ext_alt_text,json=extAltText" json:"ext_alt_text,omitempty"`
}

func (m *EntityMedia) Reset()                    { *m = EntityMedia{} }
func (m *EntityMedia) String() string            { return proto.CompactTextString(m) }
func (*EntityMedia) ProtoMessage()               {}
func (*EntityMedia) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *EntityMedia) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EntityMedia) GetMediaUrl() string {
	if m != nil {
		return m.MediaUrl
	}
	return ""
}

func (m *EntityMedia) GetMediaUrlHttps() string {
	if m != nil {
		return m.MediaUrlHttps
	}
	return ""
}

func (m *EntityMedia) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *EntityMedia) GetDisplayUrl() string {
	if m != nil {
		return m.DisplayUrl
	}
	return ""
}

func (m *EntityMedia) GetExpandedUrl() string {
	if m != nil {
		return m.ExpandedUrl
	}
	return ""
}

func (m *EntityMedia) GetSizes() *MediaSizes {
	if m != nil {
		return m.Sizes
	}
	return nil
}

func (m *EntityMedia) GetSourceStatusId() int64 {
	if m != nil {
		return m.SourceStatusId
	}
	return 0
}

func (m *EntityMedia) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *EntityMedia) GetIndices() []int64 {
	if m != nil {
		return m.Indices
	}
	return nil
}

func (m *EntityMedia) GetVideoInfo() *VideoInfo {
	if m != nil {
		return m.VideoInfo
	}
	return nil
}

func (m *EntityMedia) GetExtAltText() string {
	if m != nil {
		return m.ExtAltText
	}
	return ""
}

type Entities struct {
	Urls         []*Url         `protobuf:"bytes,1,rep,name=urls" json:"urls,omitempty"`
	Hashtags     []*Hashtag     `protobuf:"bytes,2,rep,name=hashtags" json:"hashtags,omitempty"`
	Url          *Url           `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	UserMentions []*UserMention `protobuf:"bytes,4,rep,name=user_mentions,json=userMentions" json:"user_mentions,omitempty"`
	Media        []*EntityMedia `protobuf:"bytes,5,rep,name=media" json:"media,omitempty"`
}

func (m *Entities) Reset()                    { *m = Entities{} }
func (m *Entities) String() string            { return proto.CompactTextString(m) }
func (*Entities) ProtoMessage()               {}
func (*Entities) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *Entities) GetUrls() []*Url {
	if m != nil {
		return m.Urls
	}
	return nil
}

func (m *Entities) GetHashtags() []*Hashtag {
	if m != nil {
		return m.Hashtags
	}
	return nil
}

func (m *Entities) GetUrl() *Url {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *Entities) GetUserMentions() []*UserMention {
	if m != nil {
		return m.UserMentions
	}
	return nil
}

func (m *Entities) GetMedia() []*EntityMedia {
	if m != nil {
		return m.Media
	}
	return nil
}

func init() {
	proto.RegisterType((*Url)(nil), "grain.twitter.Url")
	proto.RegisterType((*Hashtag)(nil), "grain.twitter.Hashtag")
	proto.RegisterType((*UserMention)(nil), "grain.twitter.UserMention")
	proto.RegisterType((*MediaSize)(nil), "grain.twitter.MediaSize")
	proto.RegisterType((*MediaSizes)(nil), "grain.twitter.MediaSizes")
	proto.RegisterType((*Variant)(nil), "grain.twitter.Variant")
	proto.RegisterType((*VideoInfo)(nil), "grain.twitter.VideoInfo")
	proto.RegisterType((*EntityMedia)(nil), "grain.twitter.EntityMedia")
	proto.RegisterType((*Entities)(nil), "grain.twitter.Entities")
}

func init() { proto.RegisterFile("twitter/entity.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 704 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x55, 0xcd, 0x6e, 0xdb, 0x38,
	0x10, 0x86, 0x22, 0xcb, 0x3f, 0x23, 0xe7, 0x07, 0x44, 0x10, 0x68, 0x77, 0x0f, 0xeb, 0x15, 0x16,
	0x59, 0x9f, 0x9c, 0x85, 0x7b, 0xc8, 0x31, 0x68, 0x81, 0x02, 0xc9, 0x21, 0x3d, 0x30, 0x71, 0x50,
	0xf4, 0x22, 0xd0, 0x16, 0x13, 0x13, 0x90, 0x25, 0x81, 0x1c, 0x25, 0x76, 0x5e, 0xa1, 0x6f, 0xd4,
	0x87, 0xe8, 0x2b, 0xb5, 0xe0, 0xe8, 0xc7, 0x89, 0xeb, 0xb8, 0x37, 0x71, 0xe6, 0xe3, 0x90, 0xc3,
	0xef, 0xfb, 0x46, 0x70, 0x8c, 0x4f, 0x0a, 0x51, 0xea, 0x33, 0x99, 0xa2, 0xc2, 0xd5, 0x28, 0xd7,
	0x19, 0x66, 0x6c, 0xff, 0x41, 0x0b, 0x95, 0x8e, 0xaa, 0x5c, 0x58, 0x80, 0x3b, 0xd1, 0x09, 0x0b,
	0xa0, 0xa3, 0xd2, 0x58, 0xcd, 0xa4, 0x09, 0x9c, 0x81, 0x3b, 0x74, 0x79, 0xbd, 0x64, 0x47, 0xe0,
	0x16, 0x3a, 0x09, 0xf6, 0x06, 0xce, 0xb0, 0xc7, 0xed, 0x27, 0xfb, 0x1b, 0xfc, 0x58, 0x99, 0x3c,
	0x11, 0xab, 0xc8, 0x66, 0x5c, 0xca, 0x40, 0x15, 0xb2, 0xc5, 0xfe, 0x81, 0xbe, 0x5c, 0xe6, 0x22,
	0x8d, 0x65, 0x4c, 0x88, 0x16, 0x21, 0xfc, 0x3a, 0x36, 0xd1, 0x49, 0x78, 0x0e, 0x9d, 0x4b, 0x61,
	0xe6, 0x28, 0x1e, 0x76, 0x1c, 0xcd, 0xa0, 0x85, 0x72, 0x89, 0xd5, 0xd9, 0xf4, 0x1d, 0x22, 0xf8,
	0x13, 0x23, 0xf5, 0xb5, 0xed, 0x29, 0x4b, 0x77, 0x6f, 0x4e, 0xc5, 0x42, 0xd6, 0x9b, 0xed, 0xb7,
	0xbd, 0xb9, 0x99, 0x69, 0x29, 0xd3, 0x88, 0x52, 0xd5, 0xcd, 0xcb, 0xd0, 0x27, 0x0b, 0x38, 0x80,
	0x3d, 0x15, 0xd3, 0x7d, 0x5d, 0xbe, 0xa7, 0x62, 0xde, 0x56, 0x71, 0x64, 0x50, 0x87, 0x17, 0xd0,
	0xbb, 0x96, 0xb1, 0x12, 0x37, 0xea, 0x59, 0xb2, 0x3e, 0x38, 0x4f, 0x81, 0x33, 0x70, 0x86, 0x1e,
	0x77, 0x9e, 0xec, 0x6a, 0x4e, 0x87, 0x78, 0xdc, 0x99, 0xb3, 0x13, 0x68, 0x6b, 0x69, 0xd4, 0x73,
	0x5d, 0xbc, 0x5a, 0x85, 0xdf, 0x1d, 0x80, 0xa6, 0x82, 0x61, 0xff, 0x43, 0x7b, 0x21, 0x63, 0x55,
	0x2c, 0xa8, 0x8e, 0x3f, 0x0e, 0x46, 0xaf, 0x58, 0x19, 0x35, 0x50, 0x5e, 0xe1, 0xd8, 0x08, 0x3c,
	0x9c, 0x17, 0x8b, 0x29, 0x1d, 0xb5, 0x6b, 0x43, 0x09, 0xb3, 0x78, 0xb3, 0x10, 0x49, 0x49, 0xcf,
	0x4e, 0x3c, 0xc1, 0x2c, 0x3e, 0x11, 0xfa, 0x41, 0x52, 0xf3, 0x3b, 0xf1, 0x04, 0x0b, 0x3f, 0x43,
	0xe7, 0x4e, 0x68, 0x25, 0x52, 0xb4, 0x1c, 0x4c, 0x15, 0x6a, 0x81, 0xb2, 0x7a, 0x95, 0x7a, 0x69,
	0x85, 0x30, 0xcb, 0x52, 0x94, 0x29, 0x46, 0xb8, 0xca, 0x6b, 0x2e, 0xfc, 0x2a, 0x76, 0xbb, 0xca,
	0x65, 0x2d, 0x2f, 0xb7, 0x91, 0x57, 0xf8, 0xd5, 0x81, 0xde, 0x9d, 0x8a, 0x65, 0x76, 0x95, 0xde,
	0x67, 0xb6, 0x84, 0x30, 0xb9, 0x9c, 0x61, 0xa4, 0x05, 0xaa, 0x8c, 0x58, 0xf6, 0xb8, 0x5f, 0xc6,
	0xb8, 0x0d, 0xb1, 0xff, 0xe0, 0x30, 0x2e, 0x28, 0x9b, 0x46, 0x0b, 0x95, 0x24, 0xca, 0xd0, 0x41,
	0x2e, 0x3f, 0xa8, 0xc3, 0xd7, 0x14, 0x65, 0x63, 0xe8, 0x3e, 0x96, 0x77, 0x36, 0x81, 0x3b, 0x70,
	0x87, 0xfe, 0xf8, 0x64, 0xa3, 0xcd, 0xaa, 0x25, 0xde, 0xe0, 0xc2, 0x6f, 0x2e, 0xf8, 0x1f, 0xc9,
	0x3f, 0xf4, 0x04, 0x95, 0x42, 0x9c, 0x5a, 0x21, 0xec, 0x2f, 0xe8, 0x59, 0x86, 0x44, 0xb4, 0x36,
	0x49, 0x97, 0x02, 0xd6, 0x08, 0xa7, 0x70, 0xd8, 0x24, 0xa3, 0x39, 0x62, 0x6e, 0xaa, 0x46, 0xf7,
	0x6b, 0xc8, 0xa5, 0x0d, 0xd6, 0x8f, 0xd0, 0x7a, 0xd3, 0x63, 0xde, 0x6f, 0x3d, 0xd6, 0xfe, 0xc5,
	0x63, 0xec, 0x0c, 0x3c, 0xab, 0x3d, 0x13, 0x74, 0x88, 0xd2, 0x3f, 0xde, 0xa2, 0xd4, 0xf0, 0x12,
	0xc7, 0x86, 0x70, 0x64, 0xb2, 0x42, 0xcf, 0x64, 0x64, 0x50, 0x60, 0x61, 0x22, 0x15, 0x07, 0xdd,
	0xf2, 0x25, 0xcb, 0xf8, 0x0d, 0x85, 0xaf, 0x62, 0x72, 0xa6, 0x25, 0xb4, 0x57, 0x39, 0xd3, 0x32,
	0xf9, 0xc2, 0x8a, 0xf0, 0xda, 0x8a, 0xe7, 0x00, 0x8f, 0x96, 0xd0, 0x48, 0xa5, 0xf7, 0x59, 0xe0,
	0x6f, 0x15, 0x58, 0xc3, 0x38, 0xef, 0x3d, 0x36, 0xe4, 0x0f, 0x6c, 0x93, 0x18, 0x89, 0x04, 0x23,
	0x1a, 0x04, 0xfd, 0xf2, 0x19, 0xe4, 0x12, 0xdf, 0x27, 0x78, 0x2b, 0x97, 0x58, 0x1b, 0x94, 0x1f,
	0x6f, 0x5e, 0x9c, 0x6c, 0xfb, 0xc3, 0x81, 0x2e, 0x91, 0xa7, 0xa4, 0x61, 0xa7, 0xd0, 0x2a, 0x74,
	0x52, 0xce, 0x09, 0x7f, 0xcc, 0x36, 0xce, 0x9f, 0xe8, 0x84, 0x53, 0xde, 0xaa, 0x64, 0x5e, 0x8e,
	0x26, 0xab, 0xa3, 0x6d, 0x2a, 0xa9, 0x26, 0x17, 0x6f, 0x70, 0xec, 0xdf, 0xb5, 0x8a, 0xb7, 0x97,
	0x26, 0x52, 0x2f, 0x60, 0xbf, 0x30, 0x52, 0x47, 0x8b, 0x72, 0x78, 0x99, 0xa0, 0x45, 0xe5, 0xff,
	0xdc, 0xc4, 0xaf, 0xe7, 0x1b, 0xef, 0x17, 0xeb, 0x85, 0x1d, 0x1b, 0x1e, 0x09, 0x27, 0xf0, 0xb6,
	0x6e, 0x7c, 0xa1, 0x53, 0x5e, 0x02, 0x3f, 0xf8, 0x5f, 0x7a, 0x55, 0x36, 0x9f, 0x4e, 0xdb, 0xf4,
	0x07, 0x78, 0xf7, 0x33, 0x00, 0x00, 0xff, 0xff, 0x5d, 0xc8, 0xeb, 0x9f, 0x19, 0x06, 0x00, 0x00,
}

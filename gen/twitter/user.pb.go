// Code generated by protoc-gen-go. DO NOT EDIT.
// source: twitter/user.proto

package twitterpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type User struct {
	ContributorsEnabled            bool      `protobuf:"varint,1,opt,name=contributors_enabled,json=contributorsEnabled" json:"contributors_enabled,omitempty"`
	CreatedAt                      string    `protobuf:"bytes,2,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	DefaultProfile                 bool      `protobuf:"varint,3,opt,name=default_profile,json=defaultProfile" json:"default_profile,omitempty"`
	DefaultProfileImage            bool      `protobuf:"varint,4,opt,name=default_profile_image,json=defaultProfileImage" json:"default_profile_image,omitempty"`
	Description                    string    `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	Email                          string    `protobuf:"bytes,6,opt,name=email" json:"email,omitempty"`
	Entities                       *Entities `protobuf:"bytes,7,opt,name=entities" json:"entities,omitempty"`
	FavouritesCount                int64     `protobuf:"varint,8,opt,name=favourites_count,json=favouritesCount" json:"favourites_count,omitempty"`
	FollowRequestSent              bool      `protobuf:"varint,9,opt,name=follow_request_sent,json=followRequestSent" json:"follow_request_sent,omitempty"`
	FollowersCount                 int64     `protobuf:"varint,10,opt,name=followers_count,json=followersCount" json:"followers_count,omitempty"`
	Following                      bool      `protobuf:"varint,11,opt,name=following" json:"following,omitempty"`
	FriendsCount                   int64     `protobuf:"varint,12,opt,name=friends_count,json=friendsCount" json:"friends_count,omitempty"`
	GeoEnabled                     bool      `protobuf:"varint,13,opt,name=geo_enabled,json=geoEnabled" json:"geo_enabled,omitempty"`
	HasExtendedProfile             bool      `protobuf:"varint,14,opt,name=has_extended_profile,json=hasExtendedProfile" json:"has_extended_profile,omitempty"`
	Id                             int64     `protobuf:"varint,15,opt,name=id" json:"id,omitempty"`
	IsTranslator                   bool      `protobuf:"varint,17,opt,name=is_translator,json=isTranslator" json:"is_translator,omitempty"`
	IsTranslationEnabled           bool      `protobuf:"varint,18,opt,name=is_translation_enabled,json=isTranslationEnabled" json:"is_translation_enabled,omitempty"`
	Lang                           string    `protobuf:"bytes,19,opt,name=lang" json:"lang,omitempty"`
	ListedCount                    int64     `protobuf:"varint,20,opt,name=listed_count,json=listedCount" json:"listed_count,omitempty"`
	Location                       string    `protobuf:"bytes,21,opt,name=location" json:"location,omitempty"`
	Name                           string    `protobuf:"bytes,22,opt,name=name" json:"name,omitempty"`
	Notifications                  bool      `protobuf:"varint,23,opt,name=notifications" json:"notifications,omitempty"`
	ProfileBackgroundColor         string    `protobuf:"bytes,24,opt,name=profile_background_color,json=profileBackgroundColor" json:"profile_background_color,omitempty"`
	ProfileBackgroundImageUrl      string    `protobuf:"bytes,25,opt,name=profile_background_image_url,json=profileBackgroundImageUrl" json:"profile_background_image_url,omitempty"`
	ProfileBackgroundImageUrlHttps string    `protobuf:"bytes,26,opt,name=profile_background_image_url_https,json=profileBackgroundImageUrlHttps" json:"profile_background_image_url_https,omitempty"`
	ProfileBackgroundTile          bool      `protobuf:"varint,27,opt,name=profile_background_tile,json=profileBackgroundTile" json:"profile_background_tile,omitempty"`
	ProfileBannerUrl               string    `protobuf:"bytes,28,opt,name=profile_banner_url,json=profileBannerUrl" json:"profile_banner_url,omitempty"`
	ProfileImageUrl                string    `protobuf:"bytes,29,opt,name=profile_image_url,json=profileImageUrl" json:"profile_image_url,omitempty"`
	ProfileImageUrlHttps           string    `protobuf:"bytes,30,opt,name=profile_image_url_https,json=profileImageUrlHttps" json:"profile_image_url_https,omitempty"`
	ProfileLinkColor               string    `protobuf:"bytes,31,opt,name=profile_link_color,json=profileLinkColor" json:"profile_link_color,omitempty"`
	ProfileSidebarBorderColor      string    `protobuf:"bytes,32,opt,name=profile_sidebar_border_color,json=profileSidebarBorderColor" json:"profile_sidebar_border_color,omitempty"`
	ProfileSidebarFillColor        string    `protobuf:"bytes,33,opt,name=profile_sidebar_fill_color,json=profileSidebarFillColor" json:"profile_sidebar_fill_color,omitempty"`
	ProfileTextColor               string    `protobuf:"bytes,34,opt,name=profile_text_color,json=profileTextColor" json:"profile_text_color,omitempty"`
	ProfileUseBackgroundImage      bool      `protobuf:"varint,35,opt,name=profile_use_background_image,json=profileUseBackgroundImage" json:"profile_use_background_image,omitempty"`
	Protected                      bool      `protobuf:"varint,37,opt,name=protected" json:"protected,omitempty"`
	ScreenName                     string    `protobuf:"bytes,38,opt,name=screen_name,json=screenName" json:"screen_name,omitempty"`
	ShowAllInlineMedia             bool      `protobuf:"varint,39,opt,name=show_all_inline_media,json=showAllInlineMedia" json:"show_all_inline_media,omitempty"`
	// Tweet status = 40; // Only included if the user is a friend
	StatusesCount       int64    `protobuf:"varint,41,opt,name=statuses_count,json=statusesCount" json:"statuses_count,omitempty"`
	TimeZone            string   `protobuf:"bytes,42,opt,name=time_zone,json=timeZone" json:"time_zone,omitempty"`
	Url                 string   `protobuf:"bytes,43,opt,name=url" json:"url,omitempty"`
	UtcOffset           int64    `protobuf:"varint,44,opt,name=utc_offset,json=utcOffset" json:"utc_offset,omitempty"`
	Verified            bool     `protobuf:"varint,45,opt,name=verified" json:"verified,omitempty"`
	WithheldInCountries []string `protobuf:"bytes,46,rep,name=withheld_in_countries,json=withheldInCountries" json:"withheld_in_countries,omitempty"`
	WithheldScope       string   `protobuf:"bytes,47,opt,name=withheld_scope,json=withheldScope" json:"withheld_scope,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *User) GetContributorsEnabled() bool {
	if m != nil {
		return m.ContributorsEnabled
	}
	return false
}

func (m *User) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *User) GetDefaultProfile() bool {
	if m != nil {
		return m.DefaultProfile
	}
	return false
}

func (m *User) GetDefaultProfileImage() bool {
	if m != nil {
		return m.DefaultProfileImage
	}
	return false
}

func (m *User) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetEntities() *Entities {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *User) GetFavouritesCount() int64 {
	if m != nil {
		return m.FavouritesCount
	}
	return 0
}

func (m *User) GetFollowRequestSent() bool {
	if m != nil {
		return m.FollowRequestSent
	}
	return false
}

func (m *User) GetFollowersCount() int64 {
	if m != nil {
		return m.FollowersCount
	}
	return 0
}

func (m *User) GetFollowing() bool {
	if m != nil {
		return m.Following
	}
	return false
}

func (m *User) GetFriendsCount() int64 {
	if m != nil {
		return m.FriendsCount
	}
	return 0
}

func (m *User) GetGeoEnabled() bool {
	if m != nil {
		return m.GeoEnabled
	}
	return false
}

func (m *User) GetHasExtendedProfile() bool {
	if m != nil {
		return m.HasExtendedProfile
	}
	return false
}

func (m *User) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetIsTranslator() bool {
	if m != nil {
		return m.IsTranslator
	}
	return false
}

func (m *User) GetIsTranslationEnabled() bool {
	if m != nil {
		return m.IsTranslationEnabled
	}
	return false
}

func (m *User) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *User) GetListedCount() int64 {
	if m != nil {
		return m.ListedCount
	}
	return 0
}

func (m *User) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetNotifications() bool {
	if m != nil {
		return m.Notifications
	}
	return false
}

func (m *User) GetProfileBackgroundColor() string {
	if m != nil {
		return m.ProfileBackgroundColor
	}
	return ""
}

func (m *User) GetProfileBackgroundImageUrl() string {
	if m != nil {
		return m.ProfileBackgroundImageUrl
	}
	return ""
}

func (m *User) GetProfileBackgroundImageUrlHttps() string {
	if m != nil {
		return m.ProfileBackgroundImageUrlHttps
	}
	return ""
}

func (m *User) GetProfileBackgroundTile() bool {
	if m != nil {
		return m.ProfileBackgroundTile
	}
	return false
}

func (m *User) GetProfileBannerUrl() string {
	if m != nil {
		return m.ProfileBannerUrl
	}
	return ""
}

func (m *User) GetProfileImageUrl() string {
	if m != nil {
		return m.ProfileImageUrl
	}
	return ""
}

func (m *User) GetProfileImageUrlHttps() string {
	if m != nil {
		return m.ProfileImageUrlHttps
	}
	return ""
}

func (m *User) GetProfileLinkColor() string {
	if m != nil {
		return m.ProfileLinkColor
	}
	return ""
}

func (m *User) GetProfileSidebarBorderColor() string {
	if m != nil {
		return m.ProfileSidebarBorderColor
	}
	return ""
}

func (m *User) GetProfileSidebarFillColor() string {
	if m != nil {
		return m.ProfileSidebarFillColor
	}
	return ""
}

func (m *User) GetProfileTextColor() string {
	if m != nil {
		return m.ProfileTextColor
	}
	return ""
}

func (m *User) GetProfileUseBackgroundImage() bool {
	if m != nil {
		return m.ProfileUseBackgroundImage
	}
	return false
}

func (m *User) GetProtected() bool {
	if m != nil {
		return m.Protected
	}
	return false
}

func (m *User) GetScreenName() string {
	if m != nil {
		return m.ScreenName
	}
	return ""
}

func (m *User) GetShowAllInlineMedia() bool {
	if m != nil {
		return m.ShowAllInlineMedia
	}
	return false
}

func (m *User) GetStatusesCount() int64 {
	if m != nil {
		return m.StatusesCount
	}
	return 0
}

func (m *User) GetTimeZone() string {
	if m != nil {
		return m.TimeZone
	}
	return ""
}

func (m *User) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *User) GetUtcOffset() int64 {
	if m != nil {
		return m.UtcOffset
	}
	return 0
}

func (m *User) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *User) GetWithheldInCountries() []string {
	if m != nil {
		return m.WithheldInCountries
	}
	return nil
}

func (m *User) GetWithheldScope() string {
	if m != nil {
		return m.WithheldScope
	}
	return ""
}

func init() {
	proto.RegisterType((*User)(nil), "grain.twitter.User")
}

func init() { proto.RegisterFile("twitter/user.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 910 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x55, 0x5d, 0x53, 0x1b, 0x37,
	0x14, 0x1d, 0x03, 0xa1, 0x58, 0xc6, 0x06, 0x84, 0x01, 0x85, 0x90, 0xc4, 0x21, 0x4d, 0xe3, 0xa4,
	0xa9, 0xd3, 0x24, 0x6d, 0xa7, 0x33, 0x7d, 0xe8, 0x04, 0x86, 0x4e, 0xe9, 0xf4, 0x6b, 0x0c, 0xbc,
	0xe4, 0x45, 0x23, 0xef, 0xde, 0xb5, 0x35, 0xc8, 0x92, 0x2b, 0x69, 0x03, 0xed, 0xff, 0xeb, 0xff,
	0xea, 0xe8, 0x6a, 0x77, 0xfd, 0x45, 0xf3, 0xb6, 0x7b, 0xce, 0x3d, 0x67, 0x8f, 0xf6, 0xea, 0x4a,
	0x84, 0xfa, 0x1b, 0xe9, 0x3d, 0xd8, 0xd7, 0xb9, 0x03, 0xdb, 0x9b, 0x58, 0xe3, 0x0d, 0x6d, 0x0e,
	0xad, 0x90, 0xba, 0x57, 0x30, 0x87, 0xed, 0xb2, 0x04, 0xb4, 0x97, 0xfe, 0xef, 0x58, 0x74, 0xfc,
	0x6f, 0x8b, 0xac, 0x5d, 0x39, 0xb0, 0xf4, 0x0d, 0x69, 0x27, 0x46, 0x7b, 0x2b, 0x07, 0xb9, 0x37,
	0xd6, 0x71, 0xd0, 0x62, 0xa0, 0x20, 0x65, 0xb5, 0x4e, 0xad, 0xbb, 0xd1, 0xdf, 0x9d, 0xe5, 0xce,
	0x22, 0x45, 0x1f, 0x12, 0x92, 0x58, 0x10, 0x1e, 0x52, 0x2e, 0x3c, 0x5b, 0xe9, 0xd4, 0xba, 0xf5,
	0x7e, 0xbd, 0x40, 0xde, 0x7b, 0xfa, 0x9c, 0x6c, 0xa5, 0x90, 0x89, 0x5c, 0x79, 0x3e, 0xb1, 0x26,
	0x93, 0x0a, 0xd8, 0x2a, 0x9a, 0xb5, 0x0a, 0xf8, 0xcf, 0x88, 0xd2, 0xb7, 0x64, 0x6f, 0xa1, 0x90,
	0xcb, 0xb1, 0x18, 0x02, 0x5b, 0x8b, 0xdf, 0x9e, 0x2f, 0x3f, 0x0f, 0x14, 0xed, 0x90, 0x46, 0x0a,
	0x2e, 0xb1, 0x72, 0xe2, 0xa5, 0xd1, 0xec, 0x1e, 0x7e, 0x7c, 0x16, 0xa2, 0x6d, 0x72, 0x0f, 0xc6,
	0x42, 0x2a, 0xb6, 0x8e, 0x5c, 0x7c, 0xa1, 0xef, 0xc8, 0x06, 0xae, 0x5f, 0x82, 0x63, 0x9f, 0x75,
	0x6a, 0xdd, 0xc6, 0xdb, 0x83, 0xde, 0xdc, 0x7f, 0xea, 0x9d, 0x15, 0x74, 0xbf, 0x2a, 0xa4, 0x2f,
	0xc8, 0x76, 0x26, 0x3e, 0x9a, 0xdc, 0x4a, 0x0f, 0x8e, 0x27, 0x26, 0xd7, 0x9e, 0x6d, 0x74, 0x6a,
	0xdd, 0xd5, 0xfe, 0xd6, 0x14, 0x3f, 0x0d, 0x30, 0xed, 0x91, 0xdd, 0xcc, 0x28, 0x65, 0x6e, 0xb8,
	0x85, 0xbf, 0x72, 0x70, 0x9e, 0x3b, 0xd0, 0x9e, 0xd5, 0x71, 0x25, 0x3b, 0x91, 0xea, 0x47, 0xe6,
	0x02, 0x34, 0xfe, 0xa4, 0x08, 0x82, 0x2d, 0x9d, 0x09, 0x3a, 0xb7, 0x2a, 0x38, 0x1a, 0x1f, 0x91,
	0x7a, 0x44, 0xa4, 0x1e, 0xb2, 0x06, 0xda, 0x4d, 0x01, 0xfa, 0x94, 0x34, 0x33, 0x2b, 0x41, 0xa7,
	0xa5, 0xc9, 0x26, 0x9a, 0x6c, 0x16, 0x60, 0xb4, 0x78, 0x4c, 0x1a, 0x43, 0x30, 0x55, 0x67, 0x9b,
	0x68, 0x42, 0x86, 0x60, 0xca, 0x86, 0x7e, 0x4d, 0xda, 0x23, 0xe1, 0x38, 0xdc, 0x7a, 0xd0, 0x29,
	0xa4, 0x55, 0xdb, 0x5a, 0x58, 0x49, 0x47, 0xc2, 0x9d, 0x15, 0x54, 0xd9, 0xba, 0x16, 0x59, 0x91,
	0x29, 0xdb, 0xc2, 0x8f, 0xad, 0xc8, 0x34, 0xe4, 0x90, 0x8e, 0x7b, 0x2b, 0xb4, 0x53, 0xc2, 0x1b,
	0xcb, 0x76, 0x50, 0xba, 0x29, 0xdd, 0x65, 0x85, 0xd1, 0x6f, 0xc8, 0xfe, 0x4c, 0x91, 0x34, 0xba,
	0x8a, 0x44, 0xb1, 0xba, 0x3d, 0xad, 0x96, 0x46, 0x97, 0xe1, 0x28, 0x59, 0x53, 0x42, 0x0f, 0xd9,
	0x2e, 0xb6, 0x13, 0x9f, 0xe9, 0x13, 0xb2, 0xa9, 0xa4, 0x0b, 0x1b, 0x30, 0xae, 0xba, 0x8d, 0x41,
	0x1a, 0x11, 0x8b, 0x8b, 0x3e, 0x24, 0x1b, 0xca, 0x24, 0xe8, 0xc4, 0xf6, 0x50, 0x5a, 0xbd, 0x07,
	0x4b, 0x2d, 0xc6, 0xc0, 0xf6, 0xa3, 0x65, 0x78, 0xa6, 0x9f, 0x93, 0xa6, 0x36, 0x5e, 0x66, 0x32,
	0xd6, 0x38, 0x76, 0x80, 0x99, 0xe6, 0x41, 0xfa, 0x3d, 0x61, 0xe5, 0x56, 0x1d, 0x88, 0xe4, 0x7a,
	0x68, 0x4d, 0xae, 0x43, 0x08, 0x65, 0x2c, 0x63, 0xe8, 0xb6, 0x5f, 0xf0, 0x27, 0x15, 0x7d, 0x1a,
	0x58, 0xfa, 0x23, 0x39, 0xba, 0x43, 0x89, 0xfb, 0x9d, 0xe7, 0x56, 0xb1, 0xfb, 0xa8, 0xbe, 0xbf,
	0xa4, 0xc6, 0x6d, 0x7f, 0x65, 0x15, 0xfd, 0x85, 0x1c, 0x7f, 0xca, 0x80, 0x8f, 0xbc, 0x9f, 0x38,
	0x76, 0x88, 0x36, 0x8f, 0xfe, 0xd7, 0xe6, 0xe7, 0x50, 0x45, 0xbf, 0x23, 0x07, 0x77, 0x78, 0xf9,
	0xd0, 0xf3, 0x07, 0xb8, 0xec, 0xbd, 0x25, 0x83, 0xcb, 0xd0, 0xf6, 0x57, 0x84, 0x4e, 0x75, 0x5a,
	0x83, 0xc5, 0xe8, 0x47, 0xf8, 0xcd, 0xed, 0x4a, 0x12, 0x88, 0x90, 0xf8, 0x25, 0xd9, 0x99, 0x9b,
	0x6b, 0x2c, 0x7e, 0x88, 0xc5, 0x5b, 0x93, 0x99, 0xa1, 0x0e, 0xb5, 0xdf, 0x4e, 0x13, 0x2d, 0x2e,
	0xe9, 0x11, 0x2a, 0xda, 0x0b, 0x8a, 0xb8, 0x90, 0x99, 0x40, 0x4a, 0xea, 0xeb, 0xa2, 0x13, 0x8f,
	0xe7, 0x02, 0xfd, 0x2a, 0xf5, 0xf5, 0x52, 0x0f, 0x9c, 0x4c, 0x61, 0x20, 0x2c, 0x1f, 0x18, 0x9b,
	0x82, 0x2d, 0x74, 0x9d, 0xb9, 0x1e, 0x5c, 0xc4, 0x92, 0x13, 0xac, 0x88, 0x06, 0x3f, 0x90, 0xc3,
	0x45, 0x83, 0x4c, 0x2a, 0x55, 0xc8, 0x9f, 0xa0, 0xfc, 0x60, 0x5e, 0xfe, 0x93, 0x54, 0x2a, 0x8a,
	0x67, 0xb2, 0x7a, 0xb8, 0xf5, 0x85, 0xe8, 0x78, 0x2e, 0xeb, 0x25, 0xdc, 0xfa, 0xa5, 0xac, 0xb9,
	0x5b, 0x6e, 0x39, 0x7b, 0x8a, 0x7d, 0x2a, 0xb3, 0x5e, 0xb9, 0xc5, 0x5e, 0x87, 0x83, 0x23, 0x1c,
	0xf5, 0x90, 0x78, 0x48, 0xd9, 0xb3, 0x78, 0x70, 0x54, 0x40, 0x38, 0x13, 0x5c, 0x62, 0x01, 0x34,
	0xc7, 0x49, 0xf8, 0x02, 0x53, 0x90, 0x08, 0xfd, 0x1e, 0xe6, 0xe1, 0x0d, 0xd9, 0x73, 0x23, 0x73,
	0xc3, 0x85, 0x52, 0x5c, 0x6a, 0x25, 0x35, 0xf0, 0x31, 0xa4, 0x52, 0xb0, 0xe7, 0xf1, 0x50, 0x08,
	0xe4, 0x7b, 0xa5, 0xce, 0x91, 0xfa, 0x2d, 0x30, 0xf4, 0x19, 0x69, 0x39, 0x2f, 0x7c, 0xee, 0xaa,
	0xc3, 0xf2, 0x05, 0xce, 0x65, 0xb3, 0x44, 0xe3, 0x64, 0x3e, 0x20, 0x75, 0x2f, 0xc7, 0xc0, 0xff,
	0x31, 0x1a, 0xd8, 0xcb, 0x38, 0x9a, 0x01, 0xf8, 0x60, 0x34, 0xd0, 0x6d, 0xb2, 0x1a, 0x76, 0xc9,
	0x97, 0x08, 0x87, 0xc7, 0x70, 0xdb, 0xe4, 0x3e, 0xe1, 0x26, 0xcb, 0x1c, 0x78, 0xf6, 0x0a, 0x1d,
	0xeb, 0xb9, 0x4f, 0xfe, 0x40, 0x20, 0xcc, 0xf9, 0x47, 0xb0, 0x32, 0x93, 0x90, 0xb2, 0xaf, 0x30,
	0x5a, 0xf5, 0x1e, 0x2e, 0x98, 0x1b, 0xe9, 0x47, 0x23, 0x50, 0x29, 0x97, 0x3a, 0x66, 0xb2, 0xe1,
	0x06, 0xe8, 0x75, 0x56, 0xbb, 0xf5, 0xfe, 0x6e, 0x49, 0x9e, 0xeb, 0xd3, 0x92, 0x0a, 0x8b, 0xa8,
	0x34, 0x2e, 0x31, 0x13, 0x60, 0xaf, 0x31, 0x4b, 0xb3, 0x44, 0x2f, 0x02, 0xd8, 0x5f, 0x97, 0x29,
	0x77, 0xde, 0x9e, 0x34, 0x3e, 0xd4, 0x8b, 0x0b, 0x64, 0x32, 0x18, 0xac, 0xe3, 0xdd, 0xfa, 0xee,
	0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc5, 0xa2, 0x35, 0x57, 0x96, 0x07, 0x00, 0x00,
}

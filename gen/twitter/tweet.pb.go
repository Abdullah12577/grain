// Code generated by protoc-gen-go. DO NOT EDIT.
// source: twitter/tweet.proto

package twitterpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Place struct {
}

func (m *Place) Reset()                    { *m = Place{} }
func (m *Place) String() string            { return proto.CompactTextString(m) }
func (*Place) ProtoMessage()               {}
func (*Place) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

type Coordinates struct {
}

func (m *Coordinates) Reset()                    { *m = Coordinates{} }
func (m *Coordinates) String() string            { return proto.CompactTextString(m) }
func (*Coordinates) ProtoMessage()               {}
func (*Coordinates) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

type ExtendedTweet struct {
}

func (m *ExtendedTweet) Reset()                    { *m = ExtendedTweet{} }
func (m *ExtendedTweet) String() string            { return proto.CompactTextString(m) }
func (*ExtendedTweet) ProtoMessage()               {}
func (*ExtendedTweet) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

type Tweet struct {
	Contributors                []int64        `protobuf:"varint,1,rep,packed,name=contributors" json:"contributors,omitempty"`
	Coordinates                 *Coordinates   `protobuf:"bytes,2,opt,name=coordinates" json:"coordinates,omitempty"`
	CreatedAt                   string         `protobuf:"bytes,3,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	DisplayTextRange            []int32        `protobuf:"varint,4,rep,packed,name=display_text_range,json=displayTextRange" json:"display_text_range,omitempty"`
	Entities                    *Entities      `protobuf:"bytes,5,opt,name=entities" json:"entities,omitempty"`
	ExtendedEntities            *Entities      `protobuf:"bytes,6,opt,name=extended_entities,json=extendedEntities" json:"extended_entities,omitempty"`
	ExtendedTweet               *ExtendedTweet `protobuf:"bytes,7,opt,name=extended_tweet,json=extendedTweet" json:"extended_tweet,omitempty"`
	FavoriteCount               int32          `protobuf:"varint,8,opt,name=favorite_count,json=favoriteCount" json:"favorite_count,omitempty"`
	Favorited                   bool           `protobuf:"varint,9,opt,name=favorited" json:"favorited,omitempty"`
	FilterLevel                 string         `protobuf:"bytes,10,opt,name=filter_level,json=filterLevel" json:"filter_level,omitempty"`
	FullText                    string         `protobuf:"bytes,11,opt,name=full_text,json=fullText" json:"full_text,omitempty"`
	HasExtendedProfile          bool           `protobuf:"varint,12,opt,name=has_extended_profile,json=hasExtendedProfile" json:"has_extended_profile,omitempty"`
	Id                          int64          `protobuf:"varint,13,opt,name=id" json:"id,omitempty"`
	InReplyToScreenName         string         `protobuf:"bytes,14,opt,name=in_reply_to_screen_name,json=inReplyToScreenName" json:"in_reply_to_screen_name,omitempty"`
	InReplyToStatusId           int64          `protobuf:"varint,15,opt,name=in_reply_to_status_id,json=inReplyToStatusId" json:"in_reply_to_status_id,omitempty"`
	InReplyToUserId             int64          `protobuf:"varint,16,opt,name=in_reply_to_user_id,json=inReplyToUserId" json:"in_reply_to_user_id,omitempty"`
	Lang                        string         `protobuf:"bytes,17,opt,name=lang" json:"lang,omitempty"`
	IsTranslationEnabled        bool           `protobuf:"varint,18,opt,name=is_translation_enabled,json=isTranslationEnabled" json:"is_translation_enabled,omitempty"`
	Place                       *Place         `protobuf:"bytes,19,opt,name=place" json:"place,omitempty"`
	QuotedStatusId              int64          `protobuf:"varint,20,opt,name=quoted_status_id,json=quotedStatusId" json:"quoted_status_id,omitempty"`
	QuotedStatus                *Tweet         `protobuf:"bytes,21,opt,name=quoted_status,json=quotedStatus" json:"quoted_status,omitempty"`
	PossiblySensitive           bool           `protobuf:"varint,22,opt,name=possibly_sensitive,json=possiblySensitive" json:"possibly_sensitive,omitempty"`
	PossiblySensitiveAppealable bool           `protobuf:"varint,23,opt,name=possibly_sensitive_appealable,json=possiblySensitiveAppealable" json:"possibly_sensitive_appealable,omitempty"`
	RetweetCount                int32          `protobuf:"varint,24,opt,name=retweet_count,json=retweetCount" json:"retweet_count,omitempty"`
	Retweeted                   bool           `protobuf:"varint,25,opt,name=retweeted" json:"retweeted,omitempty"`
	RetweetedStatus             *Tweet         `protobuf:"bytes,26,opt,name=retweeted_status,json=retweetedStatus" json:"retweeted_status,omitempty"`
	Source                      string         `protobuf:"bytes,27,opt,name=source" json:"source,omitempty"`
	// map[string]interface{} scopes = 28;
	Text                string   `protobuf:"bytes,29,opt,name=text" json:"text,omitempty"`
	User                *User    `protobuf:"bytes,30,opt,name=user" json:"user,omitempty"`
	WithheldCopyright   bool     `protobuf:"varint,31,opt,name=withheld_copyright,json=withheldCopyright" json:"withheld_copyright,omitempty"`
	WithheldInCountries []string `protobuf:"bytes,32,rep,name=withheld_in_countries,json=withheldInCountries" json:"withheld_in_countries,omitempty"`
	WithheldScope       string   `protobuf:"bytes,33,opt,name=withheld_scope,json=withheldScope" json:"withheld_scope,omitempty"`
}

func (m *Tweet) Reset()                    { *m = Tweet{} }
func (m *Tweet) String() string            { return proto.CompactTextString(m) }
func (*Tweet) ProtoMessage()               {}
func (*Tweet) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *Tweet) GetContributors() []int64 {
	if m != nil {
		return m.Contributors
	}
	return nil
}

func (m *Tweet) GetCoordinates() *Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *Tweet) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Tweet) GetDisplayTextRange() []int32 {
	if m != nil {
		return m.DisplayTextRange
	}
	return nil
}

func (m *Tweet) GetEntities() *Entities {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *Tweet) GetExtendedEntities() *Entities {
	if m != nil {
		return m.ExtendedEntities
	}
	return nil
}

func (m *Tweet) GetExtendedTweet() *ExtendedTweet {
	if m != nil {
		return m.ExtendedTweet
	}
	return nil
}

func (m *Tweet) GetFavoriteCount() int32 {
	if m != nil {
		return m.FavoriteCount
	}
	return 0
}

func (m *Tweet) GetFavorited() bool {
	if m != nil {
		return m.Favorited
	}
	return false
}

func (m *Tweet) GetFilterLevel() string {
	if m != nil {
		return m.FilterLevel
	}
	return ""
}

func (m *Tweet) GetFullText() string {
	if m != nil {
		return m.FullText
	}
	return ""
}

func (m *Tweet) GetHasExtendedProfile() bool {
	if m != nil {
		return m.HasExtendedProfile
	}
	return false
}

func (m *Tweet) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Tweet) GetInReplyToScreenName() string {
	if m != nil {
		return m.InReplyToScreenName
	}
	return ""
}

func (m *Tweet) GetInReplyToStatusId() int64 {
	if m != nil {
		return m.InReplyToStatusId
	}
	return 0
}

func (m *Tweet) GetInReplyToUserId() int64 {
	if m != nil {
		return m.InReplyToUserId
	}
	return 0
}

func (m *Tweet) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *Tweet) GetIsTranslationEnabled() bool {
	if m != nil {
		return m.IsTranslationEnabled
	}
	return false
}

func (m *Tweet) GetPlace() *Place {
	if m != nil {
		return m.Place
	}
	return nil
}

func (m *Tweet) GetQuotedStatusId() int64 {
	if m != nil {
		return m.QuotedStatusId
	}
	return 0
}

func (m *Tweet) GetQuotedStatus() *Tweet {
	if m != nil {
		return m.QuotedStatus
	}
	return nil
}

func (m *Tweet) GetPossiblySensitive() bool {
	if m != nil {
		return m.PossiblySensitive
	}
	return false
}

func (m *Tweet) GetPossiblySensitiveAppealable() bool {
	if m != nil {
		return m.PossiblySensitiveAppealable
	}
	return false
}

func (m *Tweet) GetRetweetCount() int32 {
	if m != nil {
		return m.RetweetCount
	}
	return 0
}

func (m *Tweet) GetRetweeted() bool {
	if m != nil {
		return m.Retweeted
	}
	return false
}

func (m *Tweet) GetRetweetedStatus() *Tweet {
	if m != nil {
		return m.RetweetedStatus
	}
	return nil
}

func (m *Tweet) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Tweet) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Tweet) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Tweet) GetWithheldCopyright() bool {
	if m != nil {
		return m.WithheldCopyright
	}
	return false
}

func (m *Tweet) GetWithheldInCountries() []string {
	if m != nil {
		return m.WithheldInCountries
	}
	return nil
}

func (m *Tweet) GetWithheldScope() string {
	if m != nil {
		return m.WithheldScope
	}
	return ""
}

func init() {
	proto.RegisterType((*Place)(nil), "grain.twitter.Place")
	proto.RegisterType((*Coordinates)(nil), "grain.twitter.Coordinates")
	proto.RegisterType((*ExtendedTweet)(nil), "grain.twitter.ExtendedTweet")
	proto.RegisterType((*Tweet)(nil), "grain.twitter.Tweet")
}

func init() { proto.RegisterFile("twitter/tweet.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 788 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x55, 0x4f, 0x6f, 0x1b, 0xb7,
	0x13, 0x85, 0x2c, 0xcb, 0xb1, 0x46, 0x5a, 0x59, 0x1e, 0xc9, 0x36, 0x63, 0xc7, 0xbf, 0xdf, 0x46,
	0x45, 0x51, 0xa1, 0x48, 0xdd, 0x20, 0xc9, 0xa5, 0x40, 0x81, 0x22, 0x51, 0x7d, 0x30, 0x50, 0x14,
	0xc1, 0xda, 0xbd, 0xf4, 0x42, 0x50, 0xbb, 0x63, 0x8b, 0xc0, 0x86, 0xdc, 0x92, 0x94, 0x6d, 0x7d,
	0xd1, 0x7e, 0x9e, 0x82, 0xdc, 0x3f, 0x92, 0x15, 0x23, 0xb7, 0xe5, 0x7b, 0x6f, 0x48, 0xbe, 0x99,
	0x47, 0x09, 0x46, 0xee, 0x41, 0x3a, 0x47, 0xe6, 0x67, 0xf7, 0x40, 0xe4, 0x2e, 0x0a, 0xa3, 0x9d,
	0xc6, 0xe8, 0xce, 0x08, 0xa9, 0x2e, 0x2a, 0xea, 0x74, 0x5c, 0x6b, 0x48, 0x39, 0xe9, 0x56, 0xa5,
	0xe8, 0x14, 0x6b, 0x74, 0x69, 0xc9, 0x94, 0xd8, 0xe4, 0x05, 0x74, 0x3e, 0xe7, 0x22, 0xa5, 0x49,
	0x04, 0xbd, 0x99, 0xd6, 0x26, 0x93, 0x4a, 0x38, 0xb2, 0x93, 0x03, 0x88, 0x2e, 0x1f, 0x1d, 0xa9,
	0x8c, 0xb2, 0x1b, 0x7f, 0xce, 0xe4, 0xdf, 0x1e, 0x74, 0xc2, 0x17, 0x4e, 0xa0, 0x9f, 0x6a, 0xe5,
	0x8c, 0x9c, 0x2f, 0x9d, 0x36, 0x96, 0xb5, 0xe2, 0xf6, 0xb4, 0x9d, 0x3c, 0xc1, 0xf0, 0x57, 0xe8,
	0xa5, 0xeb, 0xdd, 0xd8, 0x4e, 0xdc, 0x9a, 0xf6, 0xde, 0x9d, 0x5e, 0x3c, 0xb9, 0xe5, 0xc5, 0xc6,
	0x79, 0xc9, 0xa6, 0x1c, 0xcf, 0x01, 0x52, 0x43, 0xc2, 0x51, 0xc6, 0x85, 0x63, 0xed, 0xb8, 0x35,
	0xed, 0x26, 0xdd, 0x0a, 0xf9, 0xe8, 0xf0, 0x0d, 0x60, 0x26, 0x6d, 0x91, 0x8b, 0x15, 0x77, 0xf4,
	0xe8, 0xb8, 0x11, 0xea, 0x8e, 0xd8, 0x6e, 0xdc, 0x9e, 0x76, 0x92, 0x61, 0xc5, 0xdc, 0xd0, 0xa3,
	0x4b, 0x3c, 0x8e, 0xef, 0x61, 0x3f, 0x74, 0x41, 0x92, 0x65, 0x9d, 0x70, 0x8f, 0x93, 0xad, 0x7b,
	0x5c, 0x56, 0x74, 0xd2, 0x08, 0xf1, 0x77, 0x38, 0xa4, 0xca, 0x3e, 0x6f, 0xaa, 0xf7, 0xbe, 0x5d,
	0x3d, 0xac, 0x2b, 0x6a, 0x04, 0x67, 0x30, 0x68, 0x76, 0x09, 0xd3, 0x62, 0x2f, 0xc2, 0x16, 0xaf,
	0xb6, 0xb7, 0xd8, 0xec, 0x74, 0x12, 0xd1, 0xe6, 0x12, 0xbf, 0x87, 0xc1, 0xad, 0xb8, 0xd7, 0x46,
	0x3a, 0xe2, 0xa9, 0x5e, 0x2a, 0xc7, 0xf6, 0xe3, 0xd6, 0xb4, 0x93, 0x44, 0x35, 0x3a, 0xf3, 0x20,
	0xbe, 0x82, 0x6e, 0x0d, 0x64, 0xac, 0x1b, 0xb7, 0xa6, 0xfb, 0xc9, 0x1a, 0xc0, 0xd7, 0xd0, 0xbf,
	0x95, 0xb9, 0x23, 0xc3, 0x73, 0xba, 0xa7, 0x9c, 0x41, 0xe8, 0x69, 0xaf, 0xc4, 0xfe, 0xf0, 0x10,
	0x9e, 0x41, 0xf7, 0x76, 0x99, 0xe7, 0xa1, 0xa5, 0xac, 0x17, 0xf8, 0x7d, 0x0f, 0xf8, 0x4e, 0xe2,
	0x5b, 0x18, 0x2f, 0x84, 0xe5, 0x8d, 0x9b, 0xc2, 0xe8, 0x5b, 0x99, 0x13, 0xeb, 0x87, 0x83, 0x70,
	0x21, 0x6c, 0xed, 0xe1, 0x73, 0xc9, 0xe0, 0x00, 0x76, 0x64, 0xc6, 0xa2, 0xb8, 0x35, 0x6d, 0x27,
	0x3b, 0x32, 0xc3, 0x0f, 0x70, 0x22, 0x15, 0x37, 0x54, 0xe4, 0x2b, 0xee, 0x34, 0xb7, 0xa9, 0x21,
	0x52, 0x5c, 0x89, 0x2f, 0xc4, 0x06, 0xe1, 0xb0, 0x91, 0x54, 0x89, 0x67, 0x6f, 0xf4, 0x75, 0xe0,
	0xfe, 0x14, 0x5f, 0x08, 0xdf, 0xc2, 0xd1, 0x93, 0x2a, 0x27, 0xdc, 0xd2, 0x72, 0x99, 0xb1, 0x83,
	0xb0, 0xf1, 0xe1, 0xba, 0x26, 0x30, 0x57, 0x19, 0xbe, 0x81, 0xd1, 0x66, 0x85, 0x8f, 0xba, 0xd7,
	0x0f, 0x83, 0xfe, 0xa0, 0xd1, 0xff, 0x65, 0xc9, 0x5c, 0x65, 0x88, 0xb0, 0x9b, 0x0b, 0x75, 0xc7,
	0x0e, 0xc3, 0x15, 0xc2, 0x37, 0x7e, 0x80, 0x63, 0x69, 0xb9, 0x33, 0x42, 0xd9, 0x5c, 0x38, 0xa9,
	0x15, 0x27, 0x25, 0xe6, 0x39, 0x65, 0x0c, 0x83, 0xdb, 0xb1, 0xb4, 0x37, 0x6b, 0xf2, 0xb2, 0xe4,
	0xf0, 0x47, 0xe8, 0x14, 0xfe, 0x21, 0xb1, 0x51, 0x18, 0xf1, 0x78, 0x6b, 0xc4, 0xe1, 0x91, 0x25,
	0xa5, 0x04, 0xa7, 0x30, 0xfc, 0x67, 0xa9, 0x7d, 0xbc, 0xd7, 0x86, 0xc6, 0xe1, 0x82, 0x83, 0x12,
	0x6f, 0xdc, 0xfc, 0x02, 0xd1, 0x13, 0x25, 0x3b, 0x7a, 0x76, 0xf7, 0x32, 0x38, 0xfd, 0xcd, 0x62,
	0xfc, 0x09, 0xb0, 0xd0, 0xd6, 0xca, 0x79, 0xbe, 0xe2, 0x96, 0x94, 0x95, 0x4e, 0xde, 0x13, 0x3b,
	0x0e, 0x16, 0x0e, 0x6b, 0xe6, 0xba, 0x26, 0xf0, 0x13, 0x9c, 0x7f, 0x2d, 0xe7, 0xa2, 0x28, 0x48,
	0xe4, 0xde, 0x21, 0x3b, 0x09, 0x95, 0x67, 0x5f, 0x55, 0x7e, 0x6c, 0x24, 0xf8, 0x1d, 0x44, 0x86,
	0x42, 0xd0, 0xab, 0xa4, 0xb2, 0x90, 0xd4, 0x7e, 0x05, 0x36, 0x41, 0xad, 0xd6, 0x94, 0xb1, 0x97,
	0x65, 0x50, 0x1b, 0x00, 0x7f, 0x83, 0x61, 0xb3, 0xa8, 0x3d, 0x9f, 0x7e, 0xc3, 0xf3, 0x41, 0xa3,
	0xae, 0x6c, 0x1f, 0xc3, 0x9e, 0xd5, 0x4b, 0x93, 0x12, 0x3b, 0x0b, 0x33, 0xad, 0x56, 0x7e, 0xd2,
	0x21, 0xd9, 0xe7, 0xe5, 0xa4, 0xfd, 0x37, 0xfe, 0x00, 0xbb, 0x3e, 0x1f, 0xec, 0x7f, 0xe1, 0x80,
	0xd1, 0xd6, 0x01, 0x3e, 0x22, 0x49, 0x10, 0xf8, 0x5e, 0x3e, 0x48, 0xb7, 0x58, 0x50, 0x9e, 0xf1,
	0x54, 0x17, 0x2b, 0x23, 0xef, 0x16, 0x8e, 0xfd, 0xbf, 0xec, 0x65, 0xcd, 0xcc, 0x6a, 0x02, 0xdf,
	0xc1, 0x51, 0x23, 0x97, 0xaa, 0xec, 0x85, 0xf1, 0xbf, 0x20, 0x71, 0xdc, 0xf6, 0x49, 0xaf, 0xc9,
	0x2b, 0x35, 0xab, 0x29, 0xff, 0xcc, 0x9b, 0x1a, 0x9b, 0xea, 0x82, 0xd8, 0xeb, 0x70, 0xd3, 0xa8,
	0x46, 0xaf, 0x3d, 0x98, 0xec, 0x49, 0xdf, 0x16, 0x93, 0xbc, 0x7c, 0xf6, 0x59, 0x04, 0xea, 0xe4,
	0x99, 0xfc, 0x07, 0x62, 0xbc, 0x1d, 0x3a, 0x8f, 0x7e, 0xea, 0xfd, 0xdd, 0xad, 0x1c, 0x17, 0xf3,
	0xf9, 0x5e, 0xf8, 0x57, 0x78, 0xff, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x92, 0x4e, 0xf3, 0x77,
	0x65, 0x06, 0x00, 0x00,
}
